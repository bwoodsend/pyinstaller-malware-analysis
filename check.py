from pathlib import Path
from pprint import pprint
import time
from subprocess import run, PIPE, DEVNULL
import io
import json
import sys

import yaml


class Git:

    def __init__(self, path):
        self.path = path

    def __call__(self, *args, **kwargs):
        return run(["git", "-C", str(self.path), *args], **kwargs)


HERE = Path(__file__).parent.resolve()
ref = sys.argv[1]

pyinstalller = Git(HERE / "pyinstaller.git")
exe_dump = HERE / "executables"
exe_dump.mkdir(exist_ok=True)

if not pyinstalller.path.exists():
    run(["git", "clone", "--mirror",
        "https://github.com/pyinstaller/pyinstaller.git"], check=True)

if pyinstalller("show", ref, stdout=DEVNULL).returncode:
    pyinstalller("fetch", "origin", ref)

p = pyinstalller("ls-tree", "-r", "-z", "--name-only", ref,
                 "PyInstaller/bootloader/Windows-64bit",
                 stdout=PIPE, universal_newlines=True)
bootloaders = p.stdout.strip("\x00").split("\x00")

hashes = {}
for bootloader in bootloaders:
    exe = exe_dump / Path(bootloader).name
    raw = pyinstalller("show", ref + ":" + bootloader, stdout=PIPE,
                       check=True).stdout
    exe.write_bytes(raw)

    hashes[bootloader] = run(
        ["vt", "scan", "file", str(exe)], check=True, stdout=PIPE,
        universal_newlines=True).stdout.strip().split()[-1]
print("Received hashes:")
pprint(hashes)

# Wait for all scans to finish.
print('Waiting for each analysis to finish:')
for (bootloader, hash) in hashes.items():
    print(" ", bootloader, end=" ")
    # while querying the file hash's status returns 'queued':
    while b"queued" in run(["vt", "analysis", "-i", "status", hash],
                           stdout=PIPE).stdout:
        # Twiddle our thumbs...
        print('.', end="")
        sys.stdout.flush()
        time.sleep(5)
    print(' done')

data_dir = HERE / ref
data_dir.mkdir(exist_ok=True)

for (bootloader, hash) in hashes.items():
    raw = run(["vt", "analysis", "status", hash], stdout=PIPE).stdout
    dest = data_dir / (Path(bootloader).name + ".json")
    data = yaml.safe_load(io.StringIO(raw.decode()))
    dest.write_text(json.dumps(data, indent="\t"))

this_repo = Git(HERE)
this_repo("reset")
this_repo("add", str(data_dir))
this_repo("commit", "-m", time.strftime("Collect results: %Y-%m-%d-%H:%M"))
